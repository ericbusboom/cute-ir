{"entries":[{"timestamp":1752969337896,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":612,"diffs":[[1,"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":108,"diffs":[[1,"\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":113,"length1":85,"diffs":[[1,"        \"microphone\": \"*\"\n"]]},{"start1":230,"length1":35,"diffs":[[1,"    \"additionalFilePaths\": []\n"]]}]}]},{"timestamp":1752969489187,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":140,"length1":125,"diffs":[[1,"        \"cutebot\": \"github:elecfreaks/pxt-cutebot#v6.2.4\"\n"]]}]}]},{"timestamp":1752976392740,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":609,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"#ia*Ld0W[F)(rW=}?%#B\">code</variable></variables><block type=\"cuteBot_IR_callback\" x=\"525\" y=\"41\"><field name=\"HANDLER_code\" id=\"#ia*Ld0W[F)(rW=}?%#B\">code</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#ia*Ld0W[F)(rW=}?%#B\">code</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"38\" y=\"175\"></block><block type=\"device_forever\" x=\"305\" y=\"175\"></block></xml>"]]}]}]},{"timestamp":1752976394384,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":737,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"#ia*Ld0W[F)(rW=}?%#B\">code</variable></variables><block type=\"cuteBot_IR_callback\" x=\"487\" y=\"-134\"><field name=\"HANDLER_code\" id=\"#ia*Ld0W[F)(rW=}?%#B\">code</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#ia*Ld0W[F)(rW=}?%#B\">code</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"0\" y=\"0\"></block><block type=\"device_forever\" x=\"267\" y=\"0\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":75,"length1":42,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":199,"length1":96,"diffs":[[1,"        \"MakerBit\": \"github:1010technologies/pxt-makerbit#v2.2.1\"\n"]]},{"start1":329,"length1":37,"diffs":[[1,"        \"README.md\"\n"]]},{"start1":356,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"added","filename":"ir.ts","value":"\n/**\n * LeagueBot\n */\n//% color=#eb2113 icon=\"\\u1f6a9\" block=\"LeagueBot\"\n//% category=\"LeagueBot\"\nnamespace leaguebot {\n    let irLed: InfraredLed;\n\n    class InfraredLed {\n        private pin: AnalogPin;\n        private waitCorrection: number;\n\n        constructor(pin: AnalogPin) {\n            this.pin = pin;\n            pins.analogWritePin(this.pin, 0);\n            pins.analogSetPeriod(this.pin, 26);\n\n            // Measure the time we need for a minimal bit (analogWritePin and waitMicros)\n            {\n                const start = input.runningTimeMicros();\n                const runs = 32;\n                for (let i = 0; i < runs; i++) {\n                    this.transmitBit(1, 1);\n                }\n                const end = input.runningTimeMicros();\n                this.waitCorrection = Math.idiv(end - start - runs * 2, runs * 2);\n            }\n\n            // Insert a pause between callibration and first message\n            control.waitMicros(2000);\n        }\n\n        public transmitBit(highMicros: number, lowMicros: number): void {\n            pins.analogWritePin(this.pin, 511);\n            control.waitMicros(highMicros);\n            pins.analogWritePin(this.pin, 1);\n            control.waitMicros(lowMicros);\n        }\n\n        public sendNec(hex32bit: string): void {\n            if (hex32bit.length != 10) {\n                return;\n            }\n\n            const NEC_HDR_MARK = 9000 - this.waitCorrection;\n            const NEC_HDR_SPACE = 4500 - this.waitCorrection;\n            const NEC_BIT_MARK = 560 - this.waitCorrection + 50;\n            const NEC_HIGH_SPACE = 1690 - this.waitCorrection - 50;\n            const NEC_LOW_SPACE = 560 - this.waitCorrection - 50;\n\n            // Decompose 32bit HEX string into two manageable 16 bit numbers\n            const addressSection = parseInt(hex32bit.substr(0, 6));\n            const commandSection = parseInt(\"0x\" + hex32bit.substr(6, 4));\n            const sections = [addressSection, commandSection];\n\n            // send the header\n            this.transmitBit(NEC_HDR_MARK, NEC_HDR_SPACE);\n\n            // send the address and command bits\n            sections.forEach((section) => {\n                let mask = 1 << 15;\n                while (mask > 0) {\n                    if (section & mask) {\n                        this.transmitBit(NEC_BIT_MARK, NEC_HIGH_SPACE);\n                    } else {\n                        this.transmitBit(NEC_BIT_MARK, NEC_LOW_SPACE);\n                    }\n                    mask >>= 1;\n                }\n            });\n\n            // mark the end of transmission\n            this.transmitBit(NEC_BIT_MARK, 0);\n        }\n    }\n\n    /**\n     * Connects to the IR-emitting LED at the specified pin.\n     * @param pin IR LED pin, eg: AnalogPin.P0\n     */\n    //% subcategory=\"IR Sender\"\n    //% blockId=\"makerbit_infrared_sender_connect\"\n    //% block=\"connect IR sender LED at pin %pin\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.columns=4\n    //% pin.fieldOptions.tooltips=\"false\"\n    //% weight=90\n    export function connectIrSenderLed(pin: AnalogPin): void {\n        irLed = new InfraredLed(pin);\n    }\n\n    /**\n     * Sends a 32bit IR datagram using the NEC protocol.\n     * @param hex32bit a 32bit hex string, eg: 0x00FF02FD\n     */\n    //% subcategory=\"IR Sender\"\n    //% blockId=\"makerbit_infrared_sender_send_datagram\"\n    //% block=\"send IR datagram %hex32bit\"\n    //% weight=80\n    export function sendIrDatagram(hex32bit: string): void {\n        if (!irLed) {\n            return;\n        }\n        irLed.sendNec(hex32bit);\n    }\n\n    /**\n     * Returns an NEC IR datagram as a 32bit hex string.\n     * @param address an 8bit address, eg. 0\n     * @param command an 8bit command, eg. 2\n     */\n    //% subcategory=\"IR Sender\"\n    //% blockId=makerbit_infrared_sender_nec_datagram\n    //% block=\"address %address | command %command\"\n    //% address.min=0 address.max=255\n    //% command.min=0 command.max=255\n    //% weight=56\n    export function irNec(address: number, command: number): string {\n        const addrSection = ((address & 0xff) << 8) | (~address & 0xff);\n        const cmdSection = ((command & 0xff) << 8) | (~command & 0xff);\n        return \"0x\" + to16BitHex(addrSection) + to16BitHex(cmdSection);\n    }\n\n    function to16BitHex(value: number): string {\n        let hex = \"\";\n        for (let pos = 0; pos < 4; pos++) {\n            let remainder = value % 16;\n            if (remainder < 10) {\n                hex = remainder.toString() + hex;\n            } else {\n                hex = String.fromCharCode(55 + remainder) + hex;\n            }\n            value = Math.idiv(value, 16);\n        }\n        return hex;\n    }\n}\n"}]},{"timestamp":1752976991129,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1836,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"05zKrI(h7q7?6|_hR|a3\">code</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"makerbit_infrared_sender_connect\"><field name=\"pin\">AnalogPin.P1</field></block></statement></block><block type=\"cuteBot_IR_callback\" x=\"409\" y=\"0\"><field name=\"HANDLER_code\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field></block></value></block></statement></block><block type=\"device_forever\" x=\"0\" y=\"175\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":75,"length1":43,"diffs":[[1,"makerbit.connectIrSenderLed(AnalogPin.P1)\n"]]},{"start1":145,"length1":120,"diffs":[[1,"\t\n"]]}]},{"type":"edited","filename":"ir.ts","patch":[{"start1":22,"length1":50,"diffs":[[1,"//% color=#eb2113 icon=\"\\u1f6a9\" block=\"LeagueBot\"\n"]]},{"start1":1985,"length1":14,"diffs":[[1,""]]},{"start1":2076,"length1":14,"diffs":[[1,""]]},{"start1":2543,"length1":21,"diffs":[[1,""]]},{"start1":2807,"length1":49,"diffs":[[1,"    //% blockId=\"makerbit_infrared_sender_connect\"\n"]]},{"start1":3311,"length1":55,"diffs":[[1,"    //% blockId=\"makerbit_infrared_sender_send_datagram\"\n"]]},{"start1":3542,"length1":9,"diffs":[[1,""]]},{"start1":3777,"length1":52,"diffs":[[1,"    //% blockId=makerbit_infrared_sender_nec_datagram\n"]]}]}]},{"timestamp":1752977577289,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":931,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"05zKrI(h7q7?6|_hR|a3\">code</variable></variables><block type=\"cuteBot_IR_callback\" x=\"501\" y=\"-20\"><field name=\"HANDLER_code\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"41\" y=\"50\"><statement name=\"HANDLER\"><block type=\"league_infrared_sender_connect\"><field name=\"pin\">AnalogPin.P1</field></block></statement></block><block type=\"device_forever\" x=\"4\" y=\"274\"><statement name=\"HANDLER\"><block type=\"basic_show_icon\"><field name=\"i\">IconNames.Heart</field><next><block type=\"league_infrared_sender_send_datagram\"><value name=\"hex32bit\"><shadow type=\"text\"><field name=\"TEXT\">0x00FF02FD</field></shadow></value><next><block type=\"basic_show_icon\"><field name=\"i\">IconNames.SmallHeart</field></block></next></block></next></block></statement></block><block type=\"device_pause\" disabled-reasons=\"pxt_automatic_disabled\" x=\"519\" y=\"329\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ms\">100</field></shadow></value><next><block type=\"basic_show_icon\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"i\">IconNames.Heart</field><next><block type=\"device_pause\" disabled-reasons=\"pxt_automatic_disabled\"><value name=\"pause\"><shadow type=\"timePicker\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"ms\">100</field></shadow></value><next><block type=\"basic_show_icon\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"i\">IconNames.SmallHeart</field></block></next></block></next></block></next></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":75,"length1":43,"diffs":[[1,"leaguebot.connectIrSenderLed(AnalogPin.P1)\n"]]},{"start1":146,"length1":0,"diffs":[[1,"    basic.showIcon(IconNames.Heart)\n"]]},{"start1":225,"length1":0,"diffs":[[1,"    basic.showIcon(IconNames.SmallHeart)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":403,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"ir.ts","patch":[{"start1":2570,"length1":7,"diffs":[[1,"            return;\n\n"]]},{"start1":2635,"length1":47,"diffs":[[1,"            this.transmitBit(NEC_BIT_MARK, 0);\n"]]}]}]},{"timestamp":1752978009415,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1517,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"05zKrI(h7q7?6|_hR|a3\">code</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"league_infrared_sender_connect\"><field name=\"pin\">AnalogPin.P3</field></block></statement></block><block type=\"cuteBot_IR_callback\" x=\"446\" y=\"-9\"><field name=\"HANDLER_code\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field></block></value></block></statement></block><block type=\"device_forever\" x=\"-1\" y=\"161\"><statement name=\"HANDLER\"><block type=\"league_infrared_sender_send_datagram\"><value name=\"hex32bit\"><shadow type=\"text\"><field name=\"TEXT\">0x00FF02FD</field></shadow></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":38,"length1":33,"diffs":[[1,"    serial.writeLine(\"\" + (code))\n"]]},{"start1":75,"length1":145,"diffs":[[1,"leaguebot.connectIrSenderLed(AnalogPin.P3)\n"]]},{"start1":146,"length1":2,"diffs":[[1,"    leaguebot.sendIrDatagram(\"0x00FF02FD\")\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":199,"length1":188,"diffs":[[1,"        \"MakerBit-IR-Transmitter\": \"github:1010technologies/pxt-makerbit-ir-transmitter#v1.0.0\"\n"]]}]}]},{"timestamp":1752978582614,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":495,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]}]},{"timestamp":1752980092512,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":2,"diffs":[[1,""]]}]}]},{"timestamp":1752980097400,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":40,"diffs":[[1,""]]},{"start1":1,"length1":0,"diffs":[[1,"\n"]]}]}]},{"timestamp":1752980099105,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1251,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"05zKrI(h7q7?6|_hR|a3\">code</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"makerbit_infrared_connect_receiver\"><field name=\"pin\">DigitalPin.P9</field><field name=\"protocol\">IrProtocol.NEC</field></block></statement></block><block type=\"makerbit_infrared_on_ir_datagram\" x=\"506\" y=\"179\"><statement name=\"HANDLER\"><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">z</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"makerbit_infrared_ir_button_pressed\"></block></value></block></statement></block><block type=\"league_infrared_sender_send_datagram\" disabled-reasons=\"pxt_automatic_disabled\" x=\"72\" y=\"283\"><value name=\"hex32bit\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">0x00FF02FD</field></shadow></value></block><block type=\"cuteBot_IR_callback\" x=\"505\" y=\"390\"><field name=\"HANDLER_code\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field><statement name=\"HANDLER\"><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field></block></value></block></statement></block><block type=\"device_forever\" x=\"9\" y=\"441\"></block></xml>"]]}]}]},{"timestamp":1753023792688,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"pxt.json","patch":[{"start1":495,"length1":35,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]}]},{"timestamp":1753023792796,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":1292,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lbT6wXFmip}VKUD2HtJR\">code</variable></variables><block type=\"pxt-on-start\" x=\"10\" y=\"10\"><statement name=\"HANDLER\"><block type=\"device_clear_display\"><next><block type=\"device_stop_animation\"><next><block type=\"makerbit_infrared_connect_receiver\"><field name=\"pin\">DigitalPin.P9</field><field name=\"protocol\">IrProtocol.NEC</field></block></next></block></next></block></statement></block><block type=\"makerbit_infrared_on_ir_datagram\" x=\"506\" y=\"179\"><statement name=\"HANDLER\"><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">z</field></shadow></value><value name=\"value\"><block type=\"makerbit_infrared_ir_button_pressed\"></block></value></block></statement></block><block type=\"cuteBot_IR_callback\" x=\"505\" y=\"390\"><field name=\"HANDLER_code\" id=\"lbT6wXFmip}VKUD2HtJR\">code</field><statement name=\"HANDLER\"><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"lbT6wXFmip}VKUD2HtJR\">code</field></block></value></block></statement></block><block type=\"device_forever\" x=\"9\" y=\"441\"></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":0,"length1":0,"diffs":[[1,"basic.clearScreen()\nled.stopAnimation()\n\n"]]},{"start1":202,"length1":40,"diffs":[[1,"makerbit.connectIrReceiver(DigitalPin.P9, IrProtocol.NEC)\n"]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":495,"length1":31,"diffs":[[1,"    \"preferredEditor\": \"blocksprj\"\n"]]}]},{"type":"edited","filename":"ir.ts","patch":[{"start1":4725,"length1":84,"diffs":[[1,""]]}]}]},{"timestamp":1753024361917,"editorVersion":"8.0.8","changes":[{"type":"edited","filename":"main.blocks","patch":[{"start1":0,"length1":2144,"diffs":[[1,"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"lbT6wXFmip}VKUD2HtJR\">code</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"device_clear_display\"><next><block type=\"device_stop_animation\"></block></next></block></statement></block><block type=\"cuteBot_IR_callback\" x=\"567\" y=\"0\"><field name=\"HANDLER_code\" id=\"lbT6wXFmip}VKUD2HtJR\">code</field><statement name=\"HANDLER\"><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><block type=\"variables_get\"><field name=\"VAR\" id=\"lbT6wXFmip}VKUD2HtJR\">code</field></block></value></block></statement></block><block type=\"makerbit_infrared_connect_receiver\" disabled-reasons=\"pxt_automatic_disabled\" x=\"543\" y=\"189\"><field name=\"pin\">DigitalPin.P9</field><field name=\"protocol\">IrProtocol.NEC</field></block><block type=\"device_forever\" x=\"0\" y=\"271\"></block><block type=\"makerbit_infrared_on_ir_datagram\" x=\"205\" y=\"271\"><statement name=\"HANDLER\"><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">z</field></shadow></value><value name=\"value\"><block type=\"makerbit_infrared_ir_button_pressed\"></block></value></block></statement></block></xml>"]]}]},{"type":"edited","filename":"main.ts","patch":[{"start1":74,"length1":76,"diffs":[[1,""]]}]},{"type":"edited","filename":"pxt.json","patch":[{"start1":495,"length1":79,"diffs":[[1,"    \"preferredEditor\": \"tsprj\"\n"]]}]},{"type":"edited","filename":"ir.ts","patch":[{"start1":147,"length1":20,"diffs":[[1,""]]},{"start1":4809,"length1":326,"diffs":[[1,""]]}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1752969337895,"editorVersion":"8.0.8","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"Cute IR\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1752976392738,"editorVersion":"8.0.8","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"#ia*Ld0W[F)(rW=}?%#B\">code</variable></variables><block type=\"cuteBot_IR_callback\" x=\"525\" y=\"41\"><field name=\"HANDLER_code\" id=\"#ia*Ld0W[F)(rW=}?%#B\">code</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"#ia*Ld0W[F)(rW=}?%#B\">code</field></block></value></block></statement></block><block type=\"pxt-on-start\" x=\"38\" y=\"175\"></block><block type=\"device_forever\" x=\"305\" y=\"175\"></block></xml>","main.ts":"","README.md":"","pxt.json":"{\n    \"name\": \"Cute IR\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"cutebot\": \"github:elecfreaks/pxt-cutebot#v6.2.4\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1752978328237,"editorVersion":"8.0.8","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"05zKrI(h7q7?6|_hR|a3\">code</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"league_infrared_sender_connect\"><field name=\"pin\">AnalogPin.P3</field></block></statement></block><block type=\"cuteBot_IR_callback\" x=\"446\" y=\"-9\"><field name=\"HANDLER_code\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field><statement name=\"HANDLER\"><block type=\"serial_writeline\"><value name=\"text\"><shadow type=\"text\"><field name=\"TEXT\"></field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field></block></value></block></statement></block><block type=\"device_forever\" x=\"-1\" y=\"161\"><statement name=\"HANDLER\"><block type=\"league_infrared_sender_send_datagram\"><value name=\"hex32bit\"><shadow type=\"text\"><field name=\"TEXT\">0x00FF02FD</field></shadow></value></block></statement></block></xml>","main.ts":"","README.md":"","ir.ts":"\n/**\n * LeagueBot\n */\n//% color=#eb2113 icon=\"\\uf024\" block=\"LeagueBot\"\n//% category=\"LeagueBot\"\nnamespace leaguebot {\n    let irLed: InfraredLed;\n\n    class InfraredLed {\n        private pin: AnalogPin;\n        private waitCorrection: number;\n\n        constructor(pin: AnalogPin) {\n            this.pin = pin;\n            pins.analogWritePin(this.pin, 0);\n            pins.analogSetPeriod(this.pin, 26);\n\n            // Measure the time we need for a minimal bit (analogWritePin and waitMicros)\n            {\n                const start = input.runningTimeMicros();\n                const runs = 32;\n                for (let i = 0; i < runs; i++) {\n                    this.transmitBit(1, 1);\n                }\n                const end = input.runningTimeMicros();\n                this.waitCorrection = Math.idiv(end - start - runs * 2, runs * 2);\n            }\n\n            // Insert a pause between callibration and first message\n            control.waitMicros(2000);\n        }\n\n        public transmitBit(highMicros: number, lowMicros: number): void {\n            pins.analogWritePin(this.pin, 511);\n            control.waitMicros(highMicros);\n            pins.analogWritePin(this.pin, 1);\n            control.waitMicros(lowMicros);\n        }\n\n        public sendNec(hex32bit: string): void {\n            if (hex32bit.length != 10) {\n                return;\n            }\n\n            const NEC_HDR_MARK = 9000 - this.waitCorrection;\n            const NEC_HDR_SPACE = 4500 - this.waitCorrection;\n            const NEC_BIT_MARK = 560 - this.waitCorrection + 50;\n            const NEC_HIGH_SPACE = 1690 - this.waitCorrection - 50;\n            const NEC_LOW_SPACE = 560 - this.waitCorrection - 50;\n\n            // Decompose 32bit HEX string into two manageable 16 bit numbers\n            const addressSection = parseInt(hex32bit.substr(0, 6));\n            const commandSection = parseInt(\"0x\" + hex32bit.substr(6, 4));\n            const sections = [addressSection, commandSection];\n\n            \n\n            // send the header\n            this.transmitBit(NEC_HDR_MARK, NEC_HDR_SPACE);\n\n            \n\n            // send the address and command bits\n            sections.forEach((section) => {\n                let mask = 1 << 15;\n                while (mask > 0) {\n                    if (section & mask) {\n                        this.transmitBit(NEC_BIT_MARK, NEC_HIGH_SPACE);\n                    } else {\n                        this.transmitBit(NEC_BIT_MARK, NEC_LOW_SPACE);\n                    }\n                    mask >>= 1;\n                }\n            });\n\n      \n            // mark the end of transmission\n            this.transmitBit(NEC_BIT_MARK, 1);\n        }\n    }\n\n    /**\n     * Connects to the IR-emitting LED at the specified pin.\n     * @param pin IR LED pin, eg: AnalogPin.P0\n     */\n    //% subcategory=\"IR Sender\"\n    //% blockId=\"league_infrared_sender_connect\"\n    //% block=\"connect IR sender LED at pin %pin\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.columns=4\n    //% pin.fieldOptions.tooltips=\"false\"\n    //% weight=90\n    export function connectIrSenderLed(pin: AnalogPin): void {\n        irLed = new InfraredLed(pin);\n    }\n\n    /**\n     * Sends a 32bit IR datagram using the NEC protocol.\n     * @param hex32bit a 32bit hex string, eg: 0x00FF02FD\n     */\n    //% subcategory=\"IR Sender\"\n    //% blockId=\"league_infrared_sender_send_datagram\"\n    //% block=\"send IR datagram %hex32bit\"\n    //% weight=80\n    export function sendIrDatagram(hex32bit: string): void {\n        if (!irLed) {\n            return;\n        }\n        \n        irLed.sendNec(hex32bit);\n    }\n\n    /**\n     * Returns an NEC IR datagram as a 32bit hex string.\n     * @param address an 8bit address, eg. 0\n     * @param command an 8bit command, eg. 2\n     */\n    //% subcategory=\"IR Sender\"\n    //% blockId=league_infrared_sender_nec_datagram\n    //% block=\"address %address | command %command\"\n    //% address.min=0 address.max=255\n    //% command.min=0 command.max=255\n    //% weight=56\n    export function irNec(address: number, command: number): string {\n        const addrSection = ((address & 0xff) << 8) | (~address & 0xff);\n        const cmdSection = ((command & 0xff) << 8) | (~command & 0xff);\n        return \"0x\" + to16BitHex(addrSection) + to16BitHex(cmdSection);\n    }\n\n    function to16BitHex(value: number): string {\n        let hex = \"\";\n        for (let pos = 0; pos < 4; pos++) {\n            let remainder = value % 16;\n            if (remainder < 10) {\n                hex = remainder.toString() + hex;\n            } else {\n                hex = String.fromCharCode(55 + remainder) + hex;\n            }\n            value = Math.idiv(value, 16);\n        }\n        return hex;\n    }\n}\n","pxt.json":"{\n    \"name\": \"Cute IR\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"cutebot\": \"github:elecfreaks/pxt-cutebot#v6.2.4\",\n        \"MakerBit-IR-Transmitter\": \"github:1010technologies/pxt-makerbit-ir-transmitter#v1.0.0\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"ir.ts\"\n    ],\n    \"preferredEditor\": \"blocksprj\"\n}\n"}},{"timestamp":1753023792688,"editorVersion":"8.0.8","text":{"main.blocks":"<xml xmlns=\"https://developers.google.com/blockly/xml\"><variables><variable id=\"05zKrI(h7q7?6|_hR|a3\">code</variable></variables><block type=\"pxt-on-start\" x=\"0\" y=\"0\"><statement name=\"HANDLER\"><block type=\"makerbit_infrared_connect_receiver\"><field name=\"pin\">DigitalPin.P9</field><field name=\"protocol\">IrProtocol.NEC</field></block></statement></block><block type=\"makerbit_infrared_on_ir_datagram\" x=\"506\" y=\"179\"><statement name=\"HANDLER\"><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">z</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"makerbit_infrared_ir_button_pressed\"></block></value></block></statement></block><block type=\"league_infrared_sender_send_datagram\" disabled-reasons=\"pxt_automatic_disabled\" x=\"72\" y=\"283\"><value name=\"hex32bit\"><shadow type=\"text\" disabled-reasons=\"pxt_automatic_disabled\"><field name=\"TEXT\">0x00FF02FD</field></shadow></value></block><block type=\"cuteBot_IR_callback\" x=\"505\" y=\"390\"><field name=\"HANDLER_code\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field><statement name=\"HANDLER\"><block type=\"serial_writevalue\"><value name=\"name\"><shadow type=\"text\"><field name=\"TEXT\">x</field></shadow></value><value name=\"value\"><shadow type=\"math_number\"><field name=\"NUM\">0</field></shadow><block type=\"variables_get\"><field name=\"VAR\" id=\"05zKrI(h7q7?6|_hR|a3\">code</field></block></value></block></statement></block><block type=\"device_forever\" x=\"9\" y=\"441\"></block></xml>","main.ts":"basic.clearScreen()\nled.stopAnimation()\n\ncuteBot.IR_callback(function (code) {\n    serial.writeValue(\"x\", code)\n})\nmakerbit.onIrDatagram(function () {\n    serial.writeValue(\"z\", makerbit.irButton())\n})\nmakerbit.connectIrReceiver(DigitalPin.P9, IrProtocol.NEC)\nbasic.forever(function () {\n\t\n})\n","README.md":"","ir.ts":"\n/**\n * LeagueBot\n */\n//% color=#eb2113 icon=\"\\uf024\" block=\"LeagueBot\"\n//% category=\"LeagueBot\"\nnamespace leaguebot {\n    let irLed: InfraredLed;\n\n    class InfraredLed {\n        private pin: AnalogPin;\n        private waitCorrection: number;\n\n        constructor(pin: AnalogPin) {\n            this.pin = pin;\n            pins.analogWritePin(this.pin, 0);\n            pins.analogSetPeriod(this.pin, 26);\n\n            // Measure the time we need for a minimal bit (analogWritePin and waitMicros)\n            {\n                const start = input.runningTimeMicros();\n                const runs = 32;\n                for (let i = 0; i < runs; i++) {\n                    this.transmitBit(1, 1);\n                }\n                const end = input.runningTimeMicros();\n                this.waitCorrection = Math.idiv(end - start - runs * 2, runs * 2);\n            }\n\n            // Insert a pause between callibration and first message\n            control.waitMicros(2000);\n        }\n\n        public transmitBit(highMicros: number, lowMicros: number): void {\n            pins.analogWritePin(this.pin, 511);\n            control.waitMicros(highMicros);\n            pins.analogWritePin(this.pin, 1);\n            control.waitMicros(lowMicros);\n        }\n\n        public sendNec(hex32bit: string): void {\n            if (hex32bit.length != 10) {\n                return;\n            }\n\n            const NEC_HDR_MARK = 9000 - this.waitCorrection;\n            const NEC_HDR_SPACE = 4500 - this.waitCorrection;\n            const NEC_BIT_MARK = 560 - this.waitCorrection + 50;\n            const NEC_HIGH_SPACE = 1690 - this.waitCorrection - 50;\n            const NEC_LOW_SPACE = 560 - this.waitCorrection - 50;\n\n            // Decompose 32bit HEX string into two manageable 16 bit numbers\n            const addressSection = parseInt(hex32bit.substr(0, 6));\n            const commandSection = parseInt(\"0x\" + hex32bit.substr(6, 4));\n            const sections = [addressSection, commandSection];\n\n            \n\n            // send the header\n            this.transmitBit(NEC_HDR_MARK, NEC_HDR_SPACE);\n\n            \n\n            // send the address and command bits\n            sections.forEach((section) => {\n                let mask = 1 << 15;\n                while (mask > 0) {\n                    if (section & mask) {\n                        this.transmitBit(NEC_BIT_MARK, NEC_HIGH_SPACE);\n                    } else {\n                        this.transmitBit(NEC_BIT_MARK, NEC_LOW_SPACE);\n                    }\n                    mask >>= 1;\n                }\n            });\n\n      \n            // mark the end of transmission\n            this.transmitBit(NEC_BIT_MARK, 1);\n        }\n    }\n\n    /**\n     * Connects to the IR-emitting LED at the specified pin.\n     * @param pin IR LED pin, eg: AnalogPin.P0\n     */\n    //% subcategory=\"IR Sender\"\n    //% blockId=\"league_infrared_sender_connect\"\n    //% block=\"connect IR sender LED at pin %pin\"\n    //% pin.fieldEditor=\"gridpicker\"\n    //% pin.fieldOptions.columns=4\n    //% pin.fieldOptions.tooltips=\"false\"\n    //% weight=90\n    export function connectIrSenderLed(pin: AnalogPin): void {\n        irLed = new InfraredLed(pin);\n    }\n\n    /**\n     * Sends a 32bit IR datagram using the NEC protocol.\n     * @param hex32bit a 32bit hex string, eg: 0x00FF02FD\n     */\n    //% subcategory=\"IR Sender\"\n    //% blockId=\"league_infrared_sender_send_datagram\"\n    //% block=\"send IR datagram %hex32bit\"\n    //% weight=80\n    export function sendIrDatagram(hex32bit: string): void {\n        if (!irLed) {\n            return;\n        }\n        \n        irLed.sendNec(hex32bit);\n    }\n\n    /**\n     * Returns an NEC IR datagram as a 32bit hex string.\n     * @param address an 8bit address, eg. 0\n     * @param command an 8bit command, eg. 2\n     */\n    //% subcategory=\"IR Sender\"\n    //% blockId=league_infrared_sender_nec_datagram\n    //% block=\"address %address | command %command\"\n    //% address.min=0 address.max=255\n    //% command.min=0 command.max=255\n    //% weight=56\n    export function irNec(address: number, command: number): string {\n        const addrSection = ((address & 0xff) << 8) | (~address & 0xff);\n        const cmdSection = ((command & 0xff) << 8) | (~command & 0xff);\n        return \"0x\" + to16BitHex(addrSection) + to16BitHex(cmdSection);\n    }\n\n    function to16BitHex(value: number): string {\n        let hex = \"\";\n        for (let pos = 0; pos < 4; pos++) {\n            let remainder = value % 16;\n            if (remainder < 10) {\n                hex = remainder.toString() + hex;\n            } else {\n                hex = String.fromCharCode(55 + remainder) + hex;\n            }\n            value = Math.idiv(value, 16);\n        }\n        return hex;\n    }\n}\n","pxt.json":"{\n    \"name\": \"Cute IR\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\",\n        \"cutebot\": \"github:elecfreaks/pxt-cutebot#v6.2.4\",\n        \"MakerBit-IR-Transmitter\": \"github:1010technologies/pxt-makerbit-ir-transmitter#v1.0.0\",\n        \"MakerBit-IR-Receiver\": \"github:1010technologies/pxt-makerbit-ir-receiver#v1.5.14\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\",\n        \"ir.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\"\n}\n"}}],"shares":[],"lastSaveTime":1753024648082}